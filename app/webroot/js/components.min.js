class DmbAddCommand extends DumboDirective {
    constructor() {
        super();
    }

    init() {
        this.classList.add('icon');
        this.classList.add('button');
        this.classList.add('icon-plus1');

        this.addEventListener('click', e => {
            this.handleClick(e);
        });
    }

    handleClick(e) {
        const target = e.target;
        const id = document.createElement('input');
        const projectid = document.createElement('input');
        const command = document.createElement('dmb-input');
        const form = target.closest('dmb-content');
        let counter = parseInt(target.getAttribute('counter'));

        id.setAttribute('type', 'hidden');
        id.setAttribute('value', '');
        id.setAttribute('name', `command[${counter}][id]`);

        projectid.setAttribute('type', 'hidden');
        projectid.setAttribute('value', target.getAttribute('project-id'));
        projectid.setAttribute('name', `command[${counter}][project_id]`);

        command.setAttribute('label', 'Command');
        command.setAttribute('value', '');
        command.setAttribute('dmb-name', `command[${counter}][command]`);
        command.setAttribute('validate', 'required');

        form.appendChild(id);
        form.appendChild(projectid);
        form.appendChild(command);

        counter++;
        target.setAttribute('counter', counter);
    }
}

customElements.define('dmb-add-command', DmbAddCommand);
class DmbButtonAction extends DumboDirective {
    constructor() {
        super();
    }

    init() {
        const action = this.getAttribute('action') || '';
        let icon = '';

        this.classList.add('icon');
        this.classList.add('button');

        switch(action) {
        case 'edit':
            icon = 'icon-edit-pencil';
            break;
        case 'delete':
            icon = 'icon-trashcan';
            break;
        case 'new':
            icon = 'icon-plus1';
            break;
        case 'search':
            icon = 'icon-filter';
            break;
        case 'execute':
            icon = 'icon-chevron-right';
            break;
        }

        if (icon.length) {
            this.classList.add(icon);
        }

        this.addEventListener('click', () => {
            this.handleClick();
        });
    }

    handleClick() {
        let panel = null;
        const url = this.getAttribute('url');
        const pageLoader = document.querySelector('#page-loader');

        switch (this.getAttribute('behavior')) {
        case 'open-panel':
            panel = document.querySelector(this.getAttribute('panel'));
            if(url) panel.setAttribute('source', url);
            panel.open();
            break;
        case 'launch-url':
            location.href = url;
            break;
        case 'ajax':
            if(pageLoader) pageLoader.open();
            fetch(new Request(url))
                .then(response => {
                    return response.json();
                })
                .then(() => {
                    window.location.reload();
                })
                .catch(error => {
                    window.dmbDialogService.closeAll();
                    window.dmbDialogService.error(error);
                });
            break;
        }
    }
}

customElements.define('dmb-button-action', DmbButtonAction);
/**
 * Component handle login 
 */ 

class DmbLogin extends DumboDirective {
    constructor() {
        super();

        const template = '<dmb-form dmb-name="login" method="post" action="?" class="login" async>' +
                            '<dmb-input class="dmb-input" label="User" validate="required" dmb-name="e" dmb-id="email"></dmb-input>' +
                            '<dmb-input class="dmb-input" label="Password" type="password" dmb-name="p" autocomplete="off" validate="required" dmb-id="password"></dmb-input>' +
                            '<dmb-button class="button button-primary" id="login-button">Ingresar</dmb-button>' +
                        '</dmb-form>';
        this.setTemplate(template);
        this.valids = [];
        this.form = null;
    }

    init() {
        const button = this.querySelector('dmb-button');
        this.form = this.querySelector('dmb-form');

        this.form.setAttribute('action', `${this.getAttribute('target')}signin`);
        button.click((e) => {
            e.preventDefault(e);
            this.loginClick();
        });
    }

    /**
     * * Reset and set validations, and send fields content to target on click
     */
    loginClick() {

        const canSend = this.form.submit();

        if (canSend) {
            this.handleLogin(this.getAttribute('target'));
        }
    }

    /**
     * Send fields to backend for login process
     * @param target string - target controler for login, and redirect
     */
    handleLogin(target) {
        const init = {
            method: 'POST',
            body: this.form.getFormData()
        };
        const loginRequest = new Request(`${target}signin`, init);

        fetch(loginRequest)
            .then(response => {
                if (!response.ok) throw new Error('Usuario o password incorrecto');
                return response.json();
            })
            .then(() => {
                window.location = `${target}index`;
            })
            .catch(error => {
                window.dmbDialogService.error(error);
            });
    }
}

customElements.define('dmb-login', DmbLogin);
/**
 * 
 */
class DmbSimpleForm extends DumboDirective {
    constructor () {
        super();
    }
    
    init() {
        const form = this.querySelector('dmb-form');
        const init = {
            method: 'POST',
            body: null
        };

        let fullReload = false;

        form.callback = () => {
            fullReload = this.hasAttribute('full-reload');

            init.body = form.getFormData();
            init.method = form.getAttribute('method');

            const loginRequest = new Request(form.getAttribute('action'), init);

            fetch(loginRequest)
                .then(response => {
                    response.json().then(resp => {
                        if(response.ok) {

                            window.dmbDialogService.closeAll();
                            window.dmbDialogService.info(resp.message);

                            setTimeout(() => {
                                fullReload ? location.replace(location.href) : location.reload();
                            }, 1500);
                        } else {
                            window.dmbDialogService.closeAll();
                            window.dmbDialogService.error(resp.message);
                        }
                    });
                })
                .catch(error => {
                    window.dmbDialogService.closeAll();
                    window.dmbDialogService.error(error.message);
                });
        };
    }
}

customElements.define('dmb-simple-form', DmbSimpleForm);
