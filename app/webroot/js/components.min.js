class DmbAddCommand extends DumboDirective {
    constructor() {
        super();
    }

    init() {
        this.classList.add('icon');
        this.classList.add('button');
        this.classList.add('icon-plus1');

        this.addEventListener('click', e => {
            this.handleClick(e);
        });
    }

    handleClick(e) {
        const target = e.target;
        const id = document.createElement('input');
        const projectid = document.createElement('input');
        const command = document.createElement('dmb-input');
        const form = target.closest('dmb-content');
        let counter = parseInt(target.getAttribute('counter'));

        id.setAttribute('type', 'hidden');
        id.setAttribute('value', '');
        id.setAttribute('name', `command[${counter}][id]`);

        projectid.setAttribute('type', 'hidden');
        projectid.setAttribute('value', target.getAttribute('project-id'));
        projectid.setAttribute('name', `command[${counter}][project_id]`);

        command.setAttribute('label', 'Command');
        command.setAttribute('value', '');
        command.setAttribute('dmb-name', `command[${counter}][command]`);
        command.setAttribute('validate', 'required');

        form.appendChild(id);
        form.appendChild(projectid);
        form.appendChild(command);

        counter++;
        target.setAttribute('counter', counter);
    }
}

customElements.define('dmb-add-command', DmbAddCommand);
class DmbButtonAction extends DumboDirective {
    constructor() {
        super();
    }

    init() {
        const action = this.getAttribute('action') || '';
        let icon = '';

        this.classList.add('icon');
        this.classList.add('button');

        switch(action) {
            case 'edit':
                icon = 'icon-edit-pencil';
                break;
            case 'delete':
                icon = 'icon-trashcan';
                break;
            case 'new':
                icon = 'icon-plus1';
                break;
            case 'search':
                icon = 'icon-filter';
                break;
            case 'execute':
                icon = 'icon-chevron-right';
                break;
            case 'attachment':
                let type = this.getAttribute('file-type') || 'text2';
                console.log(type);
                icon = `icon-file-${type}`;
                break;
        }

        if (icon.length) {
            this.classList.add(icon);
        }

        this.addEventListener('click', () => {
            this.handleClick();
        });
    }

    handleClick() {
        let panel = null;
        let form = null;
        const url = this.getAttribute('url');
        const target = this.getAttribute('target');
        const formToExec = this.getAttribute('form');
        const pageLoader = document.querySelector('#page-loader');

        switch (this.getAttribute('behavior')) {
            case 'exec-form':
                if(formToExec) {
                    form = document.querySelector(formToExec);
                    if(url) form.setAttribute('action', url);
                    if(target) form.setAttribute('target', target);
                    form.submit();
                }
                break;
            case 'open-panel':
                panel = document.querySelector(this.getAttribute('panel'));
                if(url) panel.setAttribute('source', url);
                panel.open();
                break;
            case 'launch-url':
                location.href = url;
                break;
            case 'ajax':
                if(pageLoader) pageLoader.open();
                fetch(new Request(url))
                    .then(response => {
                        return response.json();
                    })
                    .then(() => {
                        window.location.reload();
                    })
                    .catch(error => {
                        window.dmbDialogService.closeAll();
                        window.dmbDialogService.error(error);
                    });
                break;
        }
    }
}

customElements.define('dmb-button-action', DmbButtonAction);
/**
 * @dmbdoc directive
 * @name DMB.directive:DmbCard
 *
 * @description
 * This directive only will contains the data, the directive is set to add proper styles and further behaviors.
 *
 * @example
 <dmb-card></dmb-card>
 */
class DmbCard extends DumboDirective {
    constructor() {
        super();
    }
}

customElements.define('dmb-card', DmbCard);
/**
 * Component handle login
 */

class DmbLogin extends DumboDirective {
    #_form;

    constructor() {
        super();

        const template = '<dmb-form dmb-name="login" method="post" action="?" class="login" async>' +
                            '<dmb-input class="dmb-input" label="" validate="required" dmb-name="e" dmb-id="email"></dmb-input>' +
                            '<dmb-input class="dmb-input" label="" type="password" dmb-name="p" autocomplete="off" validate="required" dmb-id="password"></dmb-input>' +
                            '<dmb-button type="submit" class="button button-primary" id="login-button"></dmb-button>' +
                        '</dmb-form>';
        this.setTemplate(template);
        this.valids = [];
        this.#_form = null;
    }

    init() {
        const button = this.querySelector('dmb-button');
        const inputs = this.querySelectorAll('dmb-input');
        const target = this.getAttribute('target');
        //set dialog transparency
        this.closest('dmb-view').style.backgroundColor = '#ffffff99';
        this.#_form = this.querySelector('dmb-form');
        inputs[0].setAttribute('label', this.getAttribute('user-label') || '');
        inputs[1].setAttribute('label', this.getAttribute('pass-label') || '');

        this.#_form.setAttribute('action', `${target}signin`);
        this.#_form.setAttribute('redirect', `${target}index`);
        button.innerText = this.getAttribute('button-label') || '';
        this.#_form.callback = this.loginClick;
    }

    /**
     * * Reset and set validations, and send fields content to target on click
     */
    loginClick() {

        const target = this.getAttribute('action');
        const redirect = this.getAttribute('redirect');
        const init = {
            method: 'POST',
            body: this.getFormData()
        };
        const loginRequest = new Request(target, init);

        fetch(loginRequest)
            .then(response => {
                if (!response.ok) throw new Error('Usuario o password incorrecto');
                return response.json();
            })
            .then(() => {
                window.location = redirect;
            })
            .catch(error => {
                window.dmbDialogService.error(error);
            });
    }

    /**
     * Send fields to backend for login process
     * @param target string - target controler for login, and redirect
     */
    handleLogin(target) {
        const init = {
            method: 'POST',
            body: this.form.getFormData()
        };
        const loginRequest = new Request(`${target}signin`, init);

        fetch(loginRequest)
            .then(response => {
                if (!response.ok) throw new Error('Usuario o password incorrecto');
                return response.json();
            })
            .then(() => {
                window.location = `${target}index`;
            })
            .catch(error => {
                window.dmbDialogService.error(error);
            });
    }
}

customElements.define('dmb-login', DmbLogin);
/**
 * @dmbdoc directive
 * @name DMB.directive:DmbMoreOption
 *
 * @description
 * Will render a DOM element for more option entry for an action
 *
 * @attribute behavior tells to the component how to perform the action. Valid options: open-panel, launch-url, ajax
 * @attribute url URL to link or to load according the behavior
 * @attribute panel (Optional) Query selector for the panel to open if the behavior is set to open-panel
 *
 * @example
<dmb-more-option
    behavior="open-panel"
    url="/url/to/run/action"
    panel="#panel-to-open">
</dmb-more-option>
 */
class DmbMoreOption extends DumboDirective {
    constructor() {
        super();
        this.url = '';
        this.pageLoader = null;
        this.panel = null;
        this.behavior = '';
    }

    init() {
        this.behavior = this.getAttribute('behavior') || '';

        if (!this.behavior.length) {
            throw 'A behavior attribute must to be defined.';
        }

        this.url = this.getAttribute('url') || '';
        this.pageLoader = document.querySelector('#page-loader');
        this.panel = this.getAttribute('panel');

        this.addEventListener('click', e => {
            e.preventDefault();
            this.handleClick();
        });
    }

    handleClick() {
        let panel = null;
        switch (this.behavior) {
        case 'open-panel':
            panel = document.querySelector(this.panel);
            if(this.url) panel.setAttribute('source', this.url);
            panel.open();
            break;
        case 'launch-url':
            location.href = this.url;
            break;
        case 'ajax':
            if(this.pageLoader) this.pageLoader.open();
            fetch(new Request(this.url))
                .then(response => {
                    if(this.pageLoader) this.pageLoader.close();
                    return response.json();
                })
                .then((response) => {
                    window.dmbDialogService.closeAll();
                    window.dmbDialogService.info(response.message);
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                })
                .catch(error => {
                    window.dmbDialogService.closeAll();
                    window.dmbDialogService.error(error.message);
                });
            break;
        }
    }
}

customElements.define('dmb-more-option', DmbMoreOption);
/**
 * @dmbdoc directive
 * @name DMB.directive:DmbMoreOptions
 *
 * @description
 * Wrapper handler for the group of muy-option items. Render an icon (three vertical points) and on click display the options.
 *
 * @example
<dmb-more-options>
    <dmb-more-option
        behavior="open-panel"
        url="/url/to/run/action"
        panel="#panel-to-open">
    </dmb-more-option>
    <dmb-more-option
        behavior="open-panel"
        url="/url/to/run/action"
        panel="#panel-to-open">
    </dmb-more-option>
</dmb-more-options>
 */
class DmbMoreOptions extends DumboDirective {
    constructor() {
        super();

        const template = '<div class="wrapper" transclude></div>';
        this.setTemplate(template);
        this.wrapper = null;
        this.option = document.createElement('dmb-more-option');
    }

    init() {
        this.wrapper = this.querySelector('.wrapper');
        this.classList.add('icon');
        this.classList.add('icon-more_vert');
        this.addEventListener('click', (e) => {
            e.preventDefault();
            this.wrapper.classList.toggle('active');
        });

        this.buildOptions();
    }

    setOptions(options) {
        if (!Array.isArray(options)) {
            throw 'Options must to be an array';
        }
        this.options = options;
        this.buildOptions();
    }

    buildOptions() {
        let size = 0;
        let i = 0;
        let option = null;

        if (this.options && Array.isArray(this.options)) {
            size = this.options.length;
            for (i = 0; i < size; i++) {
                option = this.option.cloneNode();
                option.innerHTML = this.options[i].text;

                if (this.options[i].behavior) option.setAttribute(this.options[i].behavior);
                if (this.options[i].url) option.setAttribute(this.options[i].url);
                if (this.options[i].panel) option.setAttribute(this.options[i].panel);

                this.wrapper.appendChild(option);
            }
        }
    }
}

customElements.define('dmb-more-options', DmbMoreOptions);
class MuySearch extends DumboDirective {
    constructor () {
        super();
        const template = '<dmb-form dmb-name="search" method="post" action="#" class="search" enctype="multipart/form-data">' +
                            '<dmb-input class="dmb-input" dmb-name="search[term]"></dmb-input>' +
                            '<dmb-button type="submit" class="button button-primary icon icon-filter"></dmb-button>' +
                        '</dmb-form>';
        this.setTemplate(template);
    }

    init() {
        let fields = '';
        let field = '';
        let input = null;
        let newinput = null;
        let form = null;
        let i = 0;
        let value = '';
        let id = null;

        if (!this.hasAttribute('fields')) throw new Error('Fields to include in search must be set.');
        fields = this.getAttribute('fields').trim();
        if (!fields.length) throw new Error('Fields to include in search must be set.');

        form = this.querySelector('form');
        form.setAttribute('action', this.getAttribute('action'));
        this.querySelector('dmb-input').setAttribute('label', this.getAttribute('label'));
        value = this.getAttribute('dmb-value') || '';
        id = this.getAttribute('dmb-id') || null;
        if(id) {
            form.id = id;
        }

        fields = fields.split(',');
        input = document.createElement('input');
        input.setAttribute('type', 'hidden');
        this.querySelector('dmb-input input').value = value;

        while (!!(field = fields.shift())) {
            newinput = input.cloneNode();
            newinput.setAttribute('name', `search[fields][${i}]`);
            newinput.value = field;
            form.prepend(newinput);
            i++;
        }

    }

}
customElements.define('dmb-search', MuySearch);
/**
 *
 */
class DmbSimpleForm extends DumboDirective {
    constructor () {
        super();
    }

    init() {
        const form = this.querySelector('dmb-form');
        const init = {
            method: 'POST',
            body: null
        };

        let fullReload = false;

        form.callback = () => {
            fullReload = this.hasAttribute('full-reload');

            init.body = form.getFormData();
            init.method = form.getAttribute('method');

            const loginRequest = new Request(form.getAttribute('action'), init);

            fetch(loginRequest)
                .then(response => {
                    response.json().then(resp => {
                        if(response.ok) {

                            window.dmbDialogService.closeAll();
                            window.dmbDialogService.info(resp.message);

                            setTimeout(() => {
                                fullReload ? location.replace(location.href) : location.reload();
                            }, 1500);
                        } else {
                            window.dmbDialogService.closeAll();
                            window.dmbDialogService.error(resp.message);
                        }
                    });
                })
                .catch(error => {
                    window.dmbDialogService.closeAll();
                    window.dmbDialogService.error(error.message);
                });
        };
    }
}

customElements.define('dmb-simple-form', DmbSimpleForm);
